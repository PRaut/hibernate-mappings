package com.dev.neo.util;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.List;
import java.util.Map;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.CreationHelper;
import org.apache.poi.ss.usermodel.Font;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.slf4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.dev.neo.dao.TableHeaders;
import com.dev.neo.exception.NQException;
import com.dev.neo.helper.message.FieldConstants;

@Component
public class ExcelGenerator
{
	@Autowired
	private Logger logger;

	@SuppressWarnings("unchecked")
	public File generateExcel(Map<String, Object> dataMap) throws IOException
	{
		String filePath = "D://dolton" + File.separator
		      + String.valueOf(dataMap.get(FieldConstants.FIELD_NAME_REPORT_NAME)) + ".xls";
		
		createBlankXLS(filePath);

		File file = new File(filePath);
		FileInputStream fileIS = new FileInputStream(file);

		try (Workbook workbook = new XSSFWorkbook(fileIS); ByteArrayOutputStream out = new ByteArrayOutputStream();)
		{
			List<TableHeaders> headersList = (List<TableHeaders>) dataMap.get(FieldConstants.FIELD_NAME_HEADER);
//			List<Map<String, String>> reportDataMap = (List<Map<String, String>>) dataMap
//			      .get(FieldConstants.RESPONSE_DATA);
			
			List<Customer> reportDataMap = dataMap.get(FieldConstants.RESPONSE_DATA);
			
			System.out.println("Report Data : "+ reportDataMap);

			CreationHelper createHelper = workbook.getCreationHelper();
			Sheet sheet = workbook.createSheet(String.valueOf(dataMap.get(FieldConstants.FIELD_NAME_REPORT_NAME)));

			Font headerFont = workbook.createFont();
			headerFont.setBold(true);

			CellStyle headerCellStyle = workbook.createCellStyle();
			headerCellStyle.setFont(headerFont);

			// Row for Header
			Row headerRow = sheet.createRow(0);
			for(TableHeaders th : headersList)
			{
				Cell cell = headerRow.createCell(headersList.indexOf(th));
				cell.setCellValue(th.getHeaders());
				cell.setCellStyle(headerCellStyle);
			}

			// CellStyle for Age
			CellStyle ageCellStyle = workbook.createCellStyle();
			ageCellStyle.setDataFormat(createHelper.createDataFormat().getFormat("#"));

			int rowIdx = 1;
			for(Map<String, String> rec : reportDataMap)
			{
				Row row = sheet.createRow((int) rowIdx++);

				int columnCount = 0;
				for(TableHeaders th : headersList)
				{
					String colName = th.getDataColumn();
					String value = rec.get(colName) != null ? String.valueOf(rec.get(colName)) : "";
					Cell cell = row.createCell(columnCount++);
					cell.setCellValue(value);
				}
			}

			workbook.write(out);
		}
		catch(Exception ex)
		{
			logger.error("Error while generating excel for the selected report.", ex);
			throw new NQException("Error while generating excel for the selected report. Please try again.");
		}

		return file;
	}
	
	private void createBlankXLS(String file)
	{
		XSSFWorkbook workbook = new XSSFWorkbook();
		workbook.createSheet("ReportData");
		FileOutputStream fos = null;

		try
		{
			fos = new FileOutputStream(new File(file));
			workbook.write(fos);

		}
		catch(IOException e)
		{
			logger.error(e.getMessage());
		}
		finally
		{
			if(fos != null)
			{
				try
				{
					fos.flush();
					fos.close();
					workbook.close();
				}
				catch(IOException e)
				{
					logger.error(e.getMessage());
				}
			}
		}
	}
}
